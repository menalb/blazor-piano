@using Model
@inject PianoGateway Piano;
@inject PianoService Service;
@implements IDisposable

<span class="@keyCss" @onmousedown="Attack" @onmouseout="Release" @onmouseup="Release">
    @if (showUsername)
    {
        <span class="key-username key-username-color fade-out @usernameCss">
            <i class="arrow up"></i>
            @username
        </span>
    }
    @BuildKey()
</span>

<style>
    .key-username-color {
        color: @usernameColor;
        font-weight: bold;
    }
</style>
@code {
    [Parameter]
    public Note note { get; set; }
    [Parameter]
    public EventCallback<Note> PlayedNote { get; set; }
    private string keyCss = "key";
    private string username = "";
    private string usernameCss = "";
    private string usernameColor = "";
    private bool showUsername = false;

    [JSInvokable]
    private async Task PlayNote()
    {
        if (note.IsValid())
        {
            await Piano.PlayNote(BuildKey());

            // StateHasChanged();
        }
    }

    private async Task Attack()
    {
        await Piano.AttackNote(BuildKey());
        Console.WriteLine(note.GetType().Name);
        await PlayedNote.InvokeAsync(note);
    }

    private async Task Release()
    {
        await Piano.ReleaseNote(BuildKey());
    }

    private async Task ShouldPlayNote(Note noteToPlay)
    {
        if (note.Name == noteToPlay.Name && note.Octave.Number == noteToPlay.Octave.Number)
        {
            showUsername = false;
            await InvokeAsync(StateHasChanged);

            await PlayNote();
            await PlayedNote.InvokeAsync(noteToPlay);

            if (noteToPlay is NotifiedNote)
            {
                var notifiedNote = noteToPlay as NotifiedNote;
                username = notifiedNote.Username;
                usernameColor = notifiedNote.Color;

                showUsername = true;
            }
            else
            {
                keyCss = "key " +
                    (keyCss.Contains("key-played-odd") ? "key-played-even" : " key-played-odd");
            }

            await InvokeAsync(StateHasChanged);
        }

    }
    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() =>
            Service.OnPlayNote += async (_note) =>
            await ShouldPlayNote(_note));
    }

    public void Dispose()
    {
        Service.OnPlayNote -= async (_note) =>
            await ShouldPlayNote(_note);
    }
    private string BuildKey() => note.Name + note.Octave.Number;
}
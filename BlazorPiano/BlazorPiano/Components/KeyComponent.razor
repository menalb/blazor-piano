@using Model
@inject PianoGateway Piano;
@inject PianoService Service;
@implements IDisposable

<span class="@keyCss" @onmousedown="Attack" @onmouseout="Release" @onmouseup="Release">@BuildKey()</span>

@code {
    [Parameter]
    public Note note { get; set; }
    [Parameter]
    public EventCallback<Note> PlayedNote { get; set; }
    private string keyCss = "key";

    [JSInvokable]
    private async Task PlayNote()
    {
        if (note.IsValid())
        {
            await Piano.PlayNote(BuildKey());            
            
            // StateHasChanged();
        }
    }

    private async Task Attack()
    {        
        await Piano.AttackNote(BuildKey());
        Console.WriteLine(note.GetType().Name);
        await PlayedNote.InvokeAsync(note);
    }

    private async Task Release()
    {
        await Piano.ReleaseNote(BuildKey());
    }

    private async Task ShouldPlayNote(Note noteToPlay)
    {
        if (note.Name == noteToPlay.Name && note.Octave.Number == noteToPlay.Octave.Number)
        {
            await PlayNote();
            await PlayedNote.InvokeAsync(noteToPlay);

            keyCss = "key " +
                (keyCss.Contains("key-played-odd") ? "key-played-even" : " key-played-odd");

            await InvokeAsync(StateHasChanged);
        }

    }
    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() =>
            Service.OnPlayNote += async (_note) =>
            await ShouldPlayNote(_note));
    }

    public void Dispose()
    {
        Service.OnPlayNote -= async (_note) =>
            await ShouldPlayNote(_note);
    }
    private string BuildKey() => note.Name + note.Octave.Number;
}
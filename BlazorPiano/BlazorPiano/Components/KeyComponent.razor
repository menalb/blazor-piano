@using Model
@inject PianoGateway Piano;
@inject PianoService Service;
@implements IDisposable

<span class="key" @onmousedown="Attack" @onmouseout="Release" @onmouseup="Release">@BuildKey()</span>

@code {
    [Parameter]
    public Note note { get; set; }
    [Parameter]
    public EventCallback<Note> PlayedNote { get; set; }
    [JSInvokable]
    private async Task PlayNote()
    {
        if (note.IsValid())
        {
            await Piano.PlayNote(BuildKey());
            await PlayedNote.InvokeAsync(note);
            // StateHasChanged();
        }
    }

    private async Task Attack()
    {
        await Piano.AttackNote(BuildKey());
        await PlayedNote.InvokeAsync(note);
    }

    private async Task Release()
    {
        await Piano.ReleaseNote(BuildKey());
    }

    private async Task ShouldPlayNote(Note noteToPlay)
    {
        if (note.Name == noteToPlay.Name && note.Octave.Number == noteToPlay.Octave.Number)
        {
            await PlayNote();
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await Task.Run(() =>
            Service.OnPlayNote += async (_note) =>
            await ShouldPlayNote(_note));
    }

    public void Dispose()
    {
        Service.OnPlayNote -= async (_note) =>
            await ShouldPlayNote(_note);
        //Service.OnPlayNote -= (note) => StateHasChanged();
    }
    private string BuildKey() => note.Name + note.Octave.Number;
}
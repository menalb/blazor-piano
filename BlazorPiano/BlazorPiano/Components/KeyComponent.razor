@using Model
@using System.Threading
@inject Services.PianoGateway Piano;
@inject Services.PianoService Service;
@implements IDisposable

<span class="@keyCss" @onmousedown="Attack" @onmouseup="Release">
    @if (showUsername)
    {
        <span class="key-username key-username-color @usernameCss @fadeCss">
            <i class="arrow up"></i>
            <span class="key-username-text">
                @username
            </span>
        </span>
    }
    @BuildKey()
</span>

<style>
    .key-username-color {
        color: @usernameColor;
        font-weight: bold;
    }

    .key-username-text {
        border: @usernameColor 1px solid;
        padding-left: 0.5rem;
        padding-right: 0.5rem;
    }
</style>
@code {
    [Parameter]
    public Note note { get; set; }
    [Parameter]
    public EventCallback<Note> PlayedNote { get; set; }

    [Parameter]
    public EventCallback<Note> AttackedNote { get; set; }
    [Parameter]
    public EventCallback<Note> ReleasedNote { get; set; }

    private string keyCss = "key";
    private string username = "";
    private string usernameCss = "";
    private string usernameColor = "";
    private bool showUsername = false;
    private string fadeCss = "";

    [JSInvokable]
    private async Task PlayNote()
    {
        if (note.IsValid())
        {
            await Piano.PlayNote(BuildKey());
        }
    }

    private async Task Attack()
    {
        await Piano.AttackNote(BuildKey());

        await AttackedNote.InvokeAsync(note);

        Service.NotifyAttackedNote(note);
    }

    private async Task Release()
    {
        await Piano.ReleaseNote(BuildKey());

        await ReleasedNote.InvokeAsync(note);

        Service.NotifyReleasedNote(note);
    }

    // For now this method has to stay to support the MIDI controller
    private async Task ShouldPlayNote(Note noteToPlay)
    {
        if (IsThisNote(noteToPlay))
        {
            showUsername = false;
            await InvokeAsync(StateHasChanged);

            await PlayNote();
            await PlayedNote.InvokeAsync(noteToPlay);

            if (noteToPlay is NotifiedNote)
            {
                var notifiedNote = noteToPlay as NotifiedNote;
                username = notifiedNote.Username;
                usernameColor = notifiedNote.Color;
                fadeCss = "fade-in-out";

                showUsername = true;
            }
            else
            {
                keyCss = "key " +
                    (keyCss.Contains("key-played-odd") ? "key-played-even" : " key-played-odd");
            }

            await InvokeAsync(StateHasChanged);
        }
    }
    
    private async Task ShouldAttackNote(Note noteToPlay)
    {
        if (IsThisNote(noteToPlay))
        {            
            showUsername = false;
            await InvokeAsync(StateHasChanged);

            await Piano.AttackNote(BuildKey());

            if (noteToPlay is NotifiedNote)
            {
                var notifiedNote = noteToPlay as NotifiedNote;
                username = notifiedNote.Username;
                usernameColor = notifiedNote.Color;

                fadeCss = "fade-in";

                showUsername = true;
                await InvokeAsync(StateHasChanged);

                await SafeReleaseAfter(3000);
            }
            else
            {
                keyCss = "key " +
                    (keyCss.Contains("key-played-odd") ? "key-played-even" : " key-played-odd");
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task SafeReleaseAfter(int releaseAfterInmilliseconds)
    {
        await Task.Delay(releaseAfterInmilliseconds);
        if (showUsername)
        {
            await ShouldReleaseNote(note);
        }
    }

    private async Task ShouldReleaseNote(Note noteToPlay)
    {
        if (IsThisNote(noteToPlay))
        {
            fadeCss = "fade-out";
            await InvokeAsync(StateHasChanged);

            await Piano.ReleaseNote(BuildKey());

            await InvokeAsync(StateHasChanged);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Service.OnPlayNote += async (_note) =>
           await ShouldPlayNote(_note);        

         Service.OnToAttackNote += ShouldAttackNote;

         Service.OnToReleaseNote += ShouldReleaseNote;

        await Task.CompletedTask;
    }
   
    public void Dispose()
    {
        Service.OnPlayNote -= async (_note) =>
            await ShouldPlayNote(_note);     

        Service.OnToAttackNote -= ShouldAttackNote;

        Service.OnToReleaseNote -= ShouldReleaseNote;
    }

    private string BuildKey() => note.Name + note.Octave.Number;

    private bool IsThisNote(Note noteToPlay) => note.Equals(noteToPlay);
}
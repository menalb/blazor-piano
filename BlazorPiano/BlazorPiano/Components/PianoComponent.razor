@using Model
@inject IJSRuntime JS;

<section>
    <button type="button" class="btn btn-secondary" disabled=@pianoButtonDisabled
        @onclick="SwitchToPiano">Piano</button>
    <button type="button" class="btn btn-secondary" disabled=@synthButtonDisabled @onclick="InitSynth">Synth</button>
</section>
<hr />
<section>
    @for (int i = 3; i < 6; i++)
    {
        <OctaveComponent PlayedNote="((note) => PlayedNote(note))" octaveNumber="@BuildOctave(i)"></OctaveComponent>
    }
</section>
<section>
    <div>
        <button type="button" class="btn" @onclick="Reset">Reset</button>
    </div>
    <div>
        @FormatPlayedNoted()
    </div>
</section>

@code{
    private System.Text.StringBuilder playedNotes = new System.Text.StringBuilder();
    private Octave octave = new Octave(1);
    private bool pianoButtonDisabled = false;
    private bool synthButtonDisabled = true;

    protected override async Task OnInitializedAsync()
    {
        await InitSynth();
    }

    private Octave BuildOctave(int number) => new Octave(number);

    private void PlayedNote(Note note)
    {
        playedNotes.Append($"{note.Name}{note.Octave.Number} ");
    }

    private async Task SwitchToPiano()
    {
        await JS.InvokeVoidAsync("PianoLib.initPiano");
        pianoButtonDisabled = true;
        synthButtonDisabled = false;
    }
    private async Task InitSynth()
    {
        await JS.InvokeVoidAsync("PianoLib.initSynth");
        synthButtonDisabled = true;
        pianoButtonDisabled = false;
    }
    private string FormatPlayedNoted() => playedNotes.ToString();

    private void Reset() => playedNotes = new System.Text.StringBuilder();
}
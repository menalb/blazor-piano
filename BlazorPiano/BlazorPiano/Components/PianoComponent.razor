@using Model
@inject PianoGateway Piano;
@inject PianoService Service;
@inject BrowserResizeService BrowserResize;
@implements IDisposable

<nav class="navbar navbar-expand-lg navbar-light bg-dark">
    <span class="mode-switch">
        <button type="button" class="btn btn-secondary" disabled=@synthButtonDisabled
                @onclick="SwitchToSynth">
            Synth
        </button>
        <button type="button" class="btn btn-secondary" disabled=@pianoButtonDisabled
                @onclick="SwitchToPiano">
            Piano
        </button>
    </span>
    <span class="midi-switch">
        <MIDIComponent PlayedNote="((note)=> PlayANote(note))"></MIDIComponent>
    </span>
</nav>

<section class="piano-keyboard">
    @for (int i = 2; i < 6; i++)
    {
        <OctaveComponent PlayedNote="((note) => PlayedNote(note))" octaveNumber="@BuildOctave(i)"></OctaveComponent>
    }
</section>
<section class="notifications">
    <Notifications @ref="NotificationComponent"
                   NoteReceived="((note)=> PlayANotifiedNote(note))"
                   PlayerJoined="((players)=> OnPayerJoined(players))"
                   Connected="(e)=>OnConnected()" />
    <ul class="list-group">
        @foreach (var player in Players)
        {
            <li class="list-group-item">
                <b style="color:@player.Color">
                    @player.Username
                </b>
                @if (player.IsYou)
                {
                    <i> (you) </i>
                }
            </li>
        }
    </ul>
</section>
@if (playedNotes.Any())
{
    <section class="played-notes">
        <div>
            <button type="button" class="btn btn-secondary" @onclick="Reset">Reset</button>
        </div>
        <div class="played-notes-container">
            @foreach (var note in playedNotes)
            {
                <button class="btn btn-dark" @onclick="()=>PlayANote(BuildReplayNote(note))">
                    <span class="played-note" style="color:@(note is NotifiedNote ? (note as NotifiedNote).Color : "" )">
                        @($"{note.Name}{note.Octave.Number}")
                    </span>
                </button>
            }
        </div>
    </section>
}

@*<div>
    <p><strong>Inner Height</strong> @InnerHeight</p>
    <p><strong>Inner Width</strong> @InnerWidth</p>
</div>*@
@code {
    int InnerHeight = 0;
    int InnerWidth = 0;


    private Stack<Note> playedNotes = new Stack<Note>();
    private Octave octave = new Octave(1);
    private bool pianoButtonDisabled = true;
    private bool synthButtonDisabled = false;

    private Notifications? NotificationComponent;

    private List<PlayerJoin> Players = new List<PlayerJoin>();

    private bool isConnected = false;

    protected override async Task OnInitializedAsync()
    {
        //BrowserResize.OnResize += BrowserHasResized;

        await Init();
        Service.OnPlayNote += (_note) => StateHasChanged();
    }

    //private async Task BrowserHasResized()
    //{
    //    InnerHeight = await BrowserResize.GetInnerHeight();
    //    InnerWidth = await BrowserResize.GetInnerWidth();

    //    StateHasChanged();
    //}

    private void OnConnected()
    {
        isConnected = true;
    }

    private void PlayANotifiedNote(NotifiedNote note)
    {
        Service.OnPlayNote(note);
    }

    private void PlayANote(Note note)
    {
        Service.OnPlayNote(note);
    }

    private Octave BuildOctave(int number) => new Octave(number);

    private async Task PlayedNote(Note note)
    {
        if (note is not ReplayNote)
        {
            playedNotes.Push(note);
        }

        if (note is not NotifiedNote && isConnected && NotificationComponent is not null)
        {
            await NotificationComponent.NotifyNote(note);
        }
    }

    private ReplayNote BuildReplayNote(Note note)
    {
        return new ReplayNote(note.Kind, note.Name, note.Octave);
    }

    private async Task SwitchToPiano()
    {
        await Piano.SwitchToPiano();
        pianoButtonDisabled = true;
        synthButtonDisabled = false;
    }

    private async Task SwitchToSynth()
    {
        await Piano.SwitchToSinth();
        synthButtonDisabled = true;
        pianoButtonDisabled = false;
    }

    private void OnPayerJoined(IEnumerable<PlayerJoin> players)
    {        
        Players = players.Select(p => p).ToList();        
    }

    private async Task Init()
    {
        await SwitchToPiano();
    }

    private void Reset() => playedNotes = new Stack<Note>();

    public void Dispose()
    {
        //BrowserResize.OnResize -= BrowserHasResized;
        Service.OnPlayNote -= (note) => StateHasChanged();
    }

}
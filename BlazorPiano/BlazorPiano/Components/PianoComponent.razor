@using Model
@inject PianoGateway Piano;
@inject PianoService Service;
@implements IDisposable

<nav class="navbar navbar-expand-lg navbar-light bg-dark">
    <span class="mode-switch">
        <button type="button" class="btn btn-secondary" disabled=@pianoButtonDisabled
            @onclick="SwitchToPiano">Piano</button>
        <button type="button" class="btn btn-secondary" disabled=@synthButtonDisabled
            @onclick="InitSynth">Synth</button>
    </span>
    <span class="midi-switch">
        <MIDIComponent PlayedNote="((note)=> PlayANote(note))"></MIDIComponent>
    </span>
</nav>

<section class="piano-keyboard">
    @for (int i = 2; i < 6; i++)
    {
        <OctaveComponent PlayedNote="((note) => PlayedNote(note))" octaveNumber="@BuildOctave(i)"></OctaveComponent>
    }
</section>
<section>
    <br />
    <Notifications @ref="NotificationComponent" ReceivedNote="((note)=> PlayANote(note))"
        Connected="(e)=>OnConnected()" />
</section>
@if (playedNotes.Any())
{
    <section class="played-notes">
        <div>
            <button type="button" class="btn btn-secondary" @onclick="Reset">Reset</button>
        </div>
        <ul class="list-group-flush">
            @foreach (var note in playedNotes)
            {
                <li class="list-group-item">@note</li>
            }
        </ul>
    </section>
}
@code {

    private Stack<string> playedNotes = new Stack<string>();
    private Octave octave = new Octave(1);
    private bool pianoButtonDisabled = false;
    private bool synthButtonDisabled = true;

    private Notifications? NotificationComponent;

    private bool isConnected = false;

    protected override async Task OnInitializedAsync()
    {
        await InitSynth();
        Service.OnPlayNote += (_note) => StateHasChanged();
    }

    private void OnConnected()
    {
        isConnected = true;
    }

    private void PlayANote(Note note)
    {
        Console.WriteLine("Play: " + note.Name);
        Service.OnPlayNote(note);
        
    }
    private Octave BuildOctave(int number) => new Octave(number);

    private async Task PlayedNote(Note note)
    {        
        playedNotes.Push($"{note.Name}{note.Octave.Number} ");
                
        if (isConnected && NotificationComponent is not null)
        {
            await NotificationComponent.NotifyNote(note);
        }
    }

    private async Task SwitchToPiano()
    {
        await Piano.SwitchToPiano();
        pianoButtonDisabled = true;
        synthButtonDisabled = false;
    }
    private async Task InitSynth()
    {
        await Piano.SwitchToSinth();
        synthButtonDisabled = true;
        pianoButtonDisabled = false;
    }

    private void Reset() => playedNotes = new Stack<string>();

    public void Dispose()
    {
        Service.OnPlayNote -= (note) => StateHasChanged();
    }

}
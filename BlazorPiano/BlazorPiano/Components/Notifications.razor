@using System.Net.WebSockets
@using System.Threading
@using System.Text
@using System.Text.Json
@using System.ComponentModel.DataAnnotations
@using Model
@inject WebSocketApiConfig websocketConfig
@implements IDisposable

<section>
    <h2>
        Play with the community!
    </h2>

    @if (webSocket.State != WebSocketState.Open)
    {
        <EditForm EditContext="@editContext" class="" OnSubmit="@HandleConnect">
            <div class="form-group mb-3 row">
                <label for="username" class="col-form-label col-sm-2">Enter your name:</label>

                <InputText id="username"
                       @bind-Value="connectUserModel.Username"
                       class="form-control col-sm-6"
                       placeholder="Enter your name to connect"
                       aria-label="Name" />

                <button type="submit" class="btn btn-secondary">Connect</button>
            </div>
            <DataAnnotationsValidator />
            <ValidationSummary />
        </EditForm>
    }

    @if (webSocket.State == WebSocketState.Open)
    {
        <div>
            <div>
                <span title="connected" class="dot connected"></span> Connected!
            </div>
            <div>
                <button type="button" class="btn btn-secondary" @onclick="Disconnect">Disconnect</button>
            </div>
        </div>
    }
</section>
<div>
    <button type="button" class="btn btn-secondary"
            @onclick="Test">
        Test
    </button>
</div>
@code {

    [Parameter]
    public EventCallback<bool> Connected { get; set; }
    [Parameter]
    public EventCallback<NotifiedNote> NoteReceived { get; set; }

    [Parameter]
    public EventCallback<NotifiedNote> AttackNoteReceived { get; set; }
    [Parameter]
    public EventCallback<NotifiedNote> ReleaseNoteReceived { get; set; }

    [Parameter]
    public EventCallback<PlayerInfo> PlayerJoined { get; set; }
    [Parameter]
    public EventCallback<PlayerInfo> PlayerLeft { get; set; }

    CancellationTokenSource disposalTokenSource = new CancellationTokenSource();
    ClientWebSocket webSocket = new ClientWebSocket();
    private EditContext editContext;

    private ConnectedUserModel connectUserModel { get; set; }

    private Random rnd = new Random();

    protected override void OnInitialized()
    {
        connectUserModel = new ConnectedUserModel { Username = "" };
        editContext = new(connectUserModel);
    }

    public async Task NotifyNote(Note note)
    {
        await Send("play", note);
    }

    public async Task NotifyAttackNote(Note note)
    {
        await Send("attack", note);
    }

    public async Task NotifyReleaseNote(Note note)
    {
        await Send("release", note);
    }

    private async Task HandleConnect()
    {
        if (editContext.Validate())
        {
            await Connect();
        }
    }

    async Task Connect()
    {
        if (webSocket == null || webSocket.State != WebSocketState.Open)
        {
            webSocket = new ClientWebSocket();
            disposalTokenSource = new CancellationTokenSource();

            string userId = Guid.NewGuid().ToString();
            string[] colors = new string[] { "red", "green", "brown", "orange", "purle", "darkgray" };
            string color = colors[rnd.Next(0, 4)];
            await webSocket.ConnectAsync(new Uri(
                $"{websocketConfig.Uri}?userId={userId}&username={connectUserModel.Username}&color={color}"
            ),
                disposalTokenSource.Token
            );

            if (webSocket.State == WebSocketState.Open)
            {
                await Connected.InvokeAsync();
            }
            _ = ReceiveLoop();
        }
    }

    async Task Send(string action, Note note)
    {
        Message message = new Message("sendmessage", new NoteToPlay(action, note.Name, note.Octave.Number));

        var serializedMessage = System.Text.Json.JsonSerializer.Serialize(message, new JsonSerializerOptions()
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase
            });

        var dataToSend = new ArraySegment<byte>(Encoding.UTF8.GetBytes(serializedMessage));

        await webSocket.SendAsync(dataToSend, WebSocketMessageType.Text, true, disposalTokenSource.Token);
    }

    async Task ReceiveLoop()
    {
        var buffer = new ArraySegment<byte>(new byte[1024]);
        while (!disposalTokenSource.IsCancellationRequested)
        {
            // Note that the received block might only be part of a larger message. If this applies in your scenario,
            // check the received.EndOfMessage and consider buffering the blocks until that property is true.
            // Or use a higher-level library such as SignalR.
            var received = await webSocket.ReceiveAsync(buffer, disposalTokenSource.Token);
            var receivedAsText = Encoding.UTF8.GetString(buffer.Array ?? new byte[] { }, 0, received.Count);

            Console.WriteLine(receivedAsText);

            StateHasChanged();
            var notification = System.Text.Json.JsonSerializer.Deserialize<NotifiedMessage>(receivedAsText);
            try
            {
                if (notification is not null && notification.message is not null && !string.IsNullOrEmpty(notification.message.note))
                {
                    NotifiedNote receivedNote = new NotifiedNote("", notification.message.note, new Octave(notification.message.octave), notification.color, notification.username);
                    if (notification.message.action == "attack")
                    {
                        await AttackNoteReceived.InvokeAsync(receivedNote);
                    }
                    else if (notification.message.action == "release")
                    {
                        await ReleaseNoteReceived.InvokeAsync(receivedNote);
                    }
                    else
                    {
                        await NoteReceived.InvokeAsync(receivedNote);
                    }
                }
                else
                {
                    var action = System.Text.Json.JsonSerializer.Deserialize<NotifiedActionMessage>(receivedAsText);
                    Console.WriteLine($"{action.action}");
                    var playerInfo = new PlayerInfo(action.user.username, action.user.color, action.user.is_you);
                    if (action.action == "player-connected")
                    {
                        await PlayerJoined.InvokeAsync(playerInfo);
                    }
                    if (action.action == "player-disconnected")
                    {
                        await PlayerLeft.InvokeAsync(playerInfo);
                    }
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                throw e;
            }
        }
    }

    public async Task Test()
    {
        var receivedNote = new NotifiedNote("", "G#", new Octave(4), "red", "Gigi");
        await NoteReceived.InvokeAsync(receivedNote);
        await Task.Delay(2000);

        await AttackNoteReceived.InvokeAsync(receivedNote);

        await Task.Delay(2000);
        await ReleaseNoteReceived.InvokeAsync(receivedNote);
    }
    //public async Task Test()
    //{
    //    var receivedNote = new NotifiedNote("", "A", new Octave(4), "red", "Gigi");
    //    await NoteReceived.InvokeAsync(receivedNote);
    //}

    private void Disconnect()
    {
        connectUserModel = new ConnectedUserModel();
        disposalTokenSource.Cancel();
        _ = webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Bye", CancellationToken.None);
    }

    public void Dispose()
    {
        disposalTokenSource.Cancel();
        _ = webSocket.CloseAsync(WebSocketCloseStatus.NormalClosure, "Bye", CancellationToken.None);
    }

    private record ConnectedUserModel
    {
        [Required]
        public string Username { get; set; }
    }

    private record NoteToPlay(string action, string note, int octave);

    private record Message(string action, NoteToPlay data);

    private record NotifiedMessage(string color, NoteToPlay message, string username);

    private record NotifiedPlayer(string username, string color, bool is_you);

    private record NotifiedActionMessage(string action, NotifiedPlayer user);
}

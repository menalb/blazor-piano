AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: An Amazon API Gateway REST API to support the piano app.

Parameters:
  TableArn:
    Type: String    
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters

Globals:
  Api:
    Cors:
      AllowOrigin: "'*'"
      AllowHeaders: "'Content-Type,x-api-key'"
      AllowMethods: "'GET','OPTIONS'"

Resources:  
  APIGatewayRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
      Policies:
        - PolicyName: APIGatewayBlazorPianoDBPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:Scan'
                # Including * in the resource Arn allows access to the DynamoDB table and indexes
                Resource:
                  - !Sub
                    - '${TableArn}*'
                    - TableArn: !Ref TableArn

  BlazorPianoApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: BlazorPianoApi
  
  PlayersResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref BlazorPianoApi
      ParentId: !GetAtt BlazorPianoApi.RootResourceId
      PathPart: 'players'
  
  PlayersMethodOptions:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref BlazorPianoApi
      ResourceId: !Ref PlayersResource
      HttpMethod: OPTIONS
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200 
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'*'"
              method.response.header.Access-Control-Allow-Origin: "'*'"              
            ResponseTemplates: 
              application/json: Empty
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: 200

  PlayersMethodGet:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref BlazorPianoApi
      ResourceId: !Ref PlayersResource
      HttpMethod: GET
      ApiKeyRequired: false
      AuthorizationType: NONE
      Integration:
        Type: AWS
        Credentials: !GetAtt APIGatewayRole.Arn
        # Should always be POST when integrating with AWS services
        IntegrationHttpMethod: POST
        # More info: https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:dynamodb:action/Scan'
        PassthroughBehavior: WHEN_NO_TEMPLATES
        RequestTemplates:
          # Build the structure of the request that is sent when calling DynamoDB Query
          # Using single-line, stringified JSON as the mapping template
          # Use $util.urlDecode($input.params('pathname')) to decode if the url path value contains spaces
          # A + or %20 may be used as a space in the url
          application/json: "{\"TableName\":\"blazorpiano_connections\"}"
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              # application/json: '{"statusCode": 200}'
              # Modify the response of the DynamoDB Query before sending back to the caller
              # Using single-line Velocity Template Language (VTL) code as the mapping template
              # \n represents a new line, \t represents a tab character, \" represents a single quote character
              application/json: "#set($inputRoot = $input.path('$')){\"players\": [#foreach($field in $inputRoot.Items) {\"connectionId\": \"$field.connectionId.S\",\"username\": \"$field.username.S\",\"color\": \"$field.color.S\",\"userId\": \"$field.userId.S\"}#if($foreach.hasNext),#end#end]}"
      MethodResponses:
        - ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: 200
  
  Deployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - PlayersMethodGet
    Properties:
      RestApiId: !Ref BlazorPianoApi
      Description: Deployment

  Stage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: Prod
      Description: Prod Stage
      DeploymentId: !Ref Deployment
      RestApiId: !Ref BlazorPianoApi

  ApiUsagePlan:
    Type: 'AWS::ApiGateway::UsagePlan'
    DependsOn:
      - Deployment
    Properties:
      ApiStages:
        - ApiId: !Ref BlazorPianoApi
          Stage: !Ref Stage
      Throttle:
        RateLimit: 500
        BurstLimit: 1000
      UsagePlanName: !Sub 'blazor-api-usage-plan'
      Quota:
        Limit: 10000
        Period: MONTH

Outputs:
  ApiRootUrl:
    Description: Root Url of the API
    Value: !Sub 
      - 'https://${ApiId}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'
      - ApiId: !Ref BlazorPianoApi